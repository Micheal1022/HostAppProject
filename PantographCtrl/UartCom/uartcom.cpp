#include "uartcom.h"
#include "includes.h"

uchar CRC_High[] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};

/* Table of CRC values for low-order byte */
uchar CRC_Low[] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
    0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
    0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
    0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
    0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
    0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
    0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
    0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
    0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
    0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
    0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
    0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
    0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
    0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

UartCom::UartCom(QObject *parent) : QObject(parent)
{
    m_buffer.clear();
    m_timer = new QTimer;
    connect(m_timer,SIGNAL(timeout()),this,SLOT(slotReadTimeout()));
}

UartCom::~UartCom()
{
    m_port->close();
}

void UartCom::initPort(QString port)
{
    m_port = new QSerialPort(port);
    m_port->setBaudRate(QSerialPort::Baud115200);         //设置波特率9600
    m_port->setDataBits(QSerialPort::Data8);            //设置为8位数据位
    m_port->setParity(QSerialPort::NoParity);           //设置为无校验
    m_port->setStopBits(QSerialPort::OneStop);          //设置为1位停止位
    m_port->setFlowControl(QSerialPort::NoFlowControl); //设置为无数据流控制
    if (m_port->open(QIODevice::ReadWrite)) {
        qDebug()<<"Open UartCom Success !";
        m_port->clear();
        m_timer->start(100);
    } else {
        qDebug()<<"Open UartCom Failure !";
    }
}

void UartCom::analysisData(QByteArray buffer)
{
    uchar data_aa = buffer.at(DATA_AA);
    uchar data_00 = buffer.at(DATA_00);
    uchar data_len= buffer.at(DATA_LEN);
    //检测帧头，尾，校验位
    if (0xAA == data_aa && 0x00 == data_00 && true == CRC16_OK(buffer)) {
        quint8 cmd = buffer.at(DATA_CMD);
        if (GETDATA == cmd && 14 == data_len){
            QList<int> dataList;
            dataList.append(buffer.at(DATA_MODE));
            int p1_h = buffer.at(DATA_P1_H);
            int p1_l = buffer.at(DATA_P1_L);
            dataList.append((p1_h << 8) | p1_l);
            int p2_h = buffer.at(DATA_P2_H);
            int p2_l = buffer.at(DATA_P2_L);

            dataList.append((p2_h << 8)| p2_l);
            int t_1 = buffer.at(DATA_T_1);
            dataList.append(t_1);
            int t_2 = buffer.at(DATA_T_2);
            dataList.append(t_2);
            int t_3 = buffer.at(DATA_T_3);
            dataList.append(t_3);
            int t_4 = buffer.at(DATA_T_4);
            dataList.append(t_4);
            int t_5 = buffer.at(DATA_T_5);
            dataList.append(t_5);
            int t_6 = buffer.at(DATA_T_6);
            dataList.append(t_6);
            int c_p = buffer.at(DATA_V_CP);
            dataList.append(c_p);
            int state = buffer.at(DATA_STATE);
            dataList.append(state);
            int error = buffer.at(DATA_ERROR);
            dataList.append(error);
            qDebug()<<"GETDATA <-----> dataList ("<<dataList.size()<<")--->>>"<<dataList;
            emit sigRecvUartData(dataList);
        } else if (GETCONF == cmd && 9 == data_len) {
            QList<int> dataList;
            dataList.append(buffer.at(DATA_MODE));
            dataList.append(buffer.at(DATA_PH));
            dataList.append(buffer.at(DATA_PL));
            dataList.append(buffer.at(DATA_LS));
            dataList.append(buffer.at(DATA_MS));
            dataList.append(buffer.at(DATA_HS));
            dataList.append(buffer.at(DATA_MT));
            dataList.append(buffer.at(DATA_ST));
            dataList.append(buffer.at(DATA_RT));
            qDebug()<<"GETCONF <-----> dataList ("<<dataList.size()<<")--->>>"<<dataList;
            emit sigRecvConfData(dataList);
        } else if (REPLAY == cmd && 1 == data_len) {
            emit sigReplay();
        }

    }
}

quint16 UartCom::CRC16(uchar *data, int len)
{
    uchar uchCRCHi = 0xFF;
    uchar uchCRCLo = 0xFF;
    quint16  uindex;
    while (len--) {
        uindex   = uchCRCHi ^ *data++;
        uchCRCHi = uchCRCLo ^ CRC_High[uindex];
        uchCRCLo = CRC_Low[uindex];
    }
    return (uchCRCLo<<8|uchCRCHi);
}

bool UartCom::CRC16_OK(QByteArray buffer)
{
    uchar dcrc_low,dcrc_hih;
    uchar data_len = buffer.at(DATA_LEN);
    if (GETDATA == buffer.at(DATA_CMD)) {
        dcrc_low = buffer.at(DATA_CRC_L);
        dcrc_hih = buffer.at(DATA_CRC_H);
    } else if (GETCONF == buffer.at(DATA_CMD)) {
        dcrc_low = buffer.at(DATA_CRC_L - 5);
        dcrc_hih = buffer.at(DATA_CRC_H - 5);
    } else if (REPLAY == buffer.at(DATA_CMD)) {
        dcrc_low = buffer.at(5);
        dcrc_hih = buffer.at(6);
    }


    buffer = buffer.left(data_len + 4);
    char *data = buffer.data();
    qint16 crcNum = CRC16((uchar*)data,buffer.size());
    uchar crc_lo = crcNum & 0xFF;
    uchar crc_hi = crcNum >> 8;
    //qDebug()<<dcrc_low<<"<<<--->>>"<<crc_lo;
    //qDebug()<<dcrc_hih<<"<<<--->>>"<<crc_hi;
    if (dcrc_low == crc_lo && dcrc_hih == crc_hi) {
        return true;
    }
    return false;
}

void UartCom::replayDataConf(int cmd)
{
    uchar data_aa = 0xAA;
    uchar data_00 = 0x00;
    QByteArray byteArray;
    byteArray.append(data_aa);
    byteArray.append(data_00);
    byteArray.append(REPLAY);
    byteArray.append(0x01);
    byteArray.append(cmd);

    char *data = byteArray.data();
    qint16 crcNum = CRC16((uchar*)data,byteArray.size());
    uchar crc_lo = crcNum & 0xFF;
    uchar crc_hi = crcNum >> 8;
    byteArray.append(crc_lo);
    byteArray.append(crc_hi);
    m_port->write(byteArray);
}

void UartCom::slotReadTimeout()
{
    m_buffer = m_port->readAll();
    //qDebug()<<"m_buffer("<<m_buffer.size()<<") --->>>"<<m_buffer;
    if (m_buffer.size() == 15 || m_buffer.size() == 20 || m_buffer.size() == 7) {
        analysisData(m_buffer);
    }
}

void UartCom::slotReadAllDate()
{

}

void UartCom::slotReplayData(int cmd)
{
    replayDataConf(cmd);
}

void UartCom::sendUartData(QByteArray byteArray)
{
    char *data = byteArray.data();
    qint16 crcNum = CRC16((uchar*)data,byteArray.size());
    uchar crc_lo = crcNum & 0xFF;
    uchar crc_hi = crcNum >> 8;
    byteArray.append(crc_lo);
    byteArray.append(crc_hi);
    qDebug()<<"byteArray ("<<byteArray.size()<<")--->>>"<<byteArray;
    m_port->write(byteArray);
}

